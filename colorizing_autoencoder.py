# -*- coding: utf-8 -*-
"""colorizing_autoencoder.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gSKReez-uakJyQfB9BN0-8hyqycLKbyY
"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

folder_path = '/content/drive/MyDrive/celebrity'

#os.listdir(folder_path)
#!ls -l /content/drive/MyDrive/celebrity

import os
import cv2

# Define the fixed size for resizing
fixed_size = (512, 512)

# Path to the folder containing celebrity images
folder_path = '/content/drive/MyDrive/celebrity'


# Create a new folder to store resized and grayscale images
output_folder = '/content/drive/MyDrive/celebrity_resized_grayscale'

os.makedirs(output_folder, exist_ok=True)

# Loop through each image in the folder
for filename in os.listdir(folder_path):
    # Read the image
    img_path = os.path.join(folder_path, filename)
    img = cv2.imread(img_path)

    # Resize the image
    resized_img = cv2.resize(img, fixed_size)

    # Convert the image to grayscale
    grayscale_img = cv2.cvtColor(resized_img, cv2.COLOR_BGR2GRAY)

    # Save the resized and grayscale image
    output_path = os.path.join(output_folder, filename)
    cv2.imwrite(output_path, grayscale_img)

    print(f"Processed: {filename}")

print("All images processed and saved successfully.")

import os
import cv2
import matplotlib.pyplot as plt

# Define the fixed size for resizing
fixed_size = (512, 512)

# Path to the folder containing celebrity images
folder_path = '/content/drive/My Drive/celebrity'

# Create a new folder to store resized and grayscale images
output_folder = '/content/drive/My Drive/celebrity_resized_grayscale'
os.makedirs(output_folder, exist_ok=True)

# Loop through each image in the folder
for filename in os.listdir(folder_path):
    # Read the image
    img_path = os.path.join(folder_path, filename)
    img = cv2.imread(img_path)

    # Resize the image
    resized_img = cv2.resize(img, fixed_size)

    # Convert the image to grayscale
    grayscale_img = cv2.cvtColor(resized_img, cv2.COLOR_BGR2GRAY)

    # Save the resized and grayscale image
    output_path = os.path.join(output_folder, filename)
    cv2.imwrite(output_path, grayscale_img)

    # Display original and processed images
    plt.figure(figsize=(10, 5))

    plt.subplot(1, 2, 1)
    plt.title('Original')
    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.title('Grayscale')
    plt.imshow(grayscale_img, cmap='gray')
    plt.axis('off')

    plt.show()

    print(f"Processed and displayed: {filename}")

print("All images processed and saved successfully.")

import os
import numpy as np
import cv2
import matplotlib.pyplot as plt
from tensorflow.keras.layers import Input, Conv2D, Conv2DTranspose
from tensorflow.keras.models import Model

# Path to the folder containing celebrity images
folder_path = '/content/drive/My Drive/celebrity_resized_grayscale'

# Load and preprocess the images
images = []
for filename in os.listdir(folder_path):
    img_path = os.path.join(folder_path, filename)
    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
    img = cv2.resize(img, (512, 512))  # Resize to the desired input size
    img = img / 255.0  # Normalize pixel values
    images.append(img)

images = np.array(images)
images = np.expand_dims(images, axis=-1)  # Add channel dimension

# Define the autoencoder architecture
input_img = Input(shape=(512, 512, 1))

# Encoder
x = Conv2D(64, (3, 3), activation='relu', padding='same')(input_img)
x = Conv2D(32, (3, 3), activation='relu', padding='same')(x)

# Decoder
x = Conv2DTranspose(32, (3, 3), activation='relu', padding='same')(x)
x = Conv2DTranspose(64, (3, 3), activation='relu', padding='same')(x)
decoded = Conv2DTranspose(3, (3, 3), activation='sigmoid', padding='same')(x)


# Define the autoencoder model
autoencoder = Model(input_img, decoded)
autoencoder.compile(optimizer='adam', loss='mse')

# Train the autoencoder
autoencoder.fit(images, images, epochs=100, batch_size=32)

# Predict few samples and display the original and predicted outcome
num_samples = 30
selected_samples = images[:num_samples]

predicted_samples = autoencoder.predict(selected_samples)

for i in range(num_samples):
    plt.figure(figsize=(10, 5))

    # Original grayscale image
    plt.subplot(1, 2, 1)
    plt.title('Original Grayscale')
    plt.imshow(selected_samples[i].squeeze(), cmap='gray')
    plt.axis('off')

    # Predicted colored image
    plt.subplot(1, 2, 2)
    plt.title('Predicted Colored')
    plt.imshow(predicted_samples[i])
    plt.axis('off')

    plt.show()